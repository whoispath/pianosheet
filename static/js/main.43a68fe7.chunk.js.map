{"version":3,"sources":["views/Sheet.tsx","modules/webmidiio.ts","views/MidiDevices.tsx","views/MidiProcessModules.tsx","modules/sequencetoabc.ts","modules/index.ts","modules/recorder.ts","modules/repeater.ts","modules/metronome.ts","App.tsx","reportWebVitals.js","app/sheetSlice.ts","app/rootReducer.ts","app/store.ts","index.js"],"names":["useStyles","makeStyles","theme","createStyles","root","width","marginTop","barNoAnimation","animation","paper","padding","spacing","textAlign","color","palette","text","secondary","position","connect","state","sheet","sheetSlice","props","classes","React","useState","undefined","editor","setEditor","uniqueId","paperId","warningId","textInput","useRef","paperRef","warningRef","useEffect","fireChanged","abcNotation","observer","ResizeObserver","entries","style","window","getComputedStyle","target","parseInt","engraver_controller","renderer","left","right","paramChanged","staffwidth","console","log","current","observe","disconnect","e","abcjs","Editor","paper_id","warnings_id","Container","Grid","container","item","xs","Button","variant","onClick","s","synth","CreateSynth","el","document","createElement","visualObjs","renderAbc","init","visualObj","then","response","prime","start","Promise","resolve","catch","error","status","warn","Paper","className","id","ref","TextField","inputRef","label","multiline","fullWidth","rows","value","onChange","setAbcNotation","onSelect","onSelectCapture","Alert","severity","WebMidi","enable","err","inputs","outputs","length","addListener","gMidiProcessFactory","registerMidiProcessModule","name","factory","createMidiProcessor","modules","currentInput","currentOutput","_installModule","midiModule","input","output","inputHandler","noteon","noteoff","_uninstallModule","removeListener","destroy","onMidiDeviceConnected","onMidiDeviceDosconnected","port","_uninstallAllModules","_register","forEach","m","enabled","switchInputOutput","inputDeviceName","outputDeviceName","newInput","newOutput","element","installModule","options","push","uninstallModule","find","filter","getInputDevices","getOutputDevices","installedModule","availableModule","keys","typography","anchorEl","setAnchorEl","open","Boolean","setInputDeviceName","setOutputDeviceName","event","currentTarget","Popover","onClose","processor","anchorOrigin","vertical","horizontal","transformOrigin","Typography","FormControl","component","FormLabel","RadioGroup","aria-label","FormControlLabel","control","Radio","map","MidiProcessModule","Checkbox","checked","installed","moduleName","installedModules","setInstalledModules","handleChange","useCallback","FormGroup","indexOf","bind","noteNameIndex","octaves","midiNumberToAbcNoteName","n","noteName","octave","toLowerCase","slice","slotToAbcDuration","slots","beatsPerMeasure","defaultBeatDurationInSlots","processVoice","maxSlot","processEnv","newAbcNotation","numMeasures","measures","lastSlotReaches","i","slotsPerMeasure","defaultBeatInSlots","measureIndex","notations","slotMaxDuration","j","maxDurationsInSlots","notes","durationInSlots","duration","slotDuration","nRest","Math","max","note","join","convertToAbcNotation","sequence","sequenceBeginTime","minBy","begin","msPerMinute","treble8","index","timeSinceBegin","measureN","measureDuration","slotInMeasureN","slotN","bass","treble8Measures","bassMeasures","defaultBeat","processAll","bpm","beatDuration","resolution","beginTime","Date","number","now","eOn","noteOnTime","getTime","timestamp","r","velocity","getSequence","delay","noteOn","setTimeout","playNote","noteOff","stopNote","beats","program","channel","currentBeat","timer","defaultOptions","sendProgramChange","setInterval","clearInterval","App","midiProcessor","setMidiProcessor","recorder","setRecorder","metronome","setMetronome","newProcessor","aRecorder","aMetronome","setSequence","setSequenceBeginTime","handle","newSequence","prevSequence","isEqual","Chip","toFixed","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","createSlice","initialState","localStorage","getItem","JSON","parse","getInitialState","reducers","action","payload","serializedState","stringify","setItem","updateLocalStorage","rootReducer","combineReducers","reducer","store","configureStore","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.43a68fe7.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport { connect } from 'react-redux'\r\n\r\nimport { createStyles, Theme, makeStyles } from '@material-ui/core/styles'\r\nimport Container from '@material-ui/core/Container'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Alert from '@material-ui/lab/Alert'\r\nimport Button from '@material-ui/core/Button'\r\n\r\nimport Abcjs from 'react-abcjs'\r\nimport abcjs from 'abcjs'\r\n\r\nimport {uniqueId} from 'lodash'\r\n\r\n//import abcjs from \"abcjs\"\r\n//import 'abcjs/abcjs-audio.css'\r\nimport { RootState } from '../app/rootReducer'\r\n\r\nconst useStyles = makeStyles((theme: Theme) => createStyles({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    marginTop: {\r\n        marginTop: 8,\r\n    },\r\n    barNoAnimation: {\r\n        animation: 'none'\r\n    },\r\n    paper: {\r\n      padding: theme.spacing(2),\r\n      textAlign: 'center',\r\n      color: theme.palette.text.secondary,\r\n      position: 'relative'\r\n    },\r\n}))\r\ntype SheetProps = {\r\n    abcNotation: string\r\n    setAbcNotation?: (newAbcNotation: string) => void\r\n}\r\n\r\nconst Sheet : React.FC<SheetProps> = (props) => {\r\n    const classes = useStyles()\r\n    const clickListener = (abcelem: any, tuneNumber: number, classes: any[], analysis: any, drag: any) => {\r\n        console.log(abcelem, tuneNumber, classes, analysis, drag)\r\n    }\r\n    const [editor, setEditor] = React.useState<any>(undefined)\r\n    \r\n    const [paperId, setPaperId] = React.useState<string>(uniqueId(\"paper-\"))\r\n    const [warningId, setWarningId] = React.useState<string>(uniqueId(\"warning-\"))\r\n\r\n    \r\n\r\n    const textInput = React.useRef(null);\r\n    const paperRef = React.useRef(null);\r\n    const warningRef = React.useRef(null);\r\n    \r\n    React.useEffect(() => {\r\n        if (editor) {\r\n        // console.log(editor?.isDirty())\r\n            editor.fireChanged()\r\n        }\r\n    }, [editor, props.abcNotation])\r\n\r\n    React.useEffect(() => {\r\n        const observer = new ResizeObserver((entries: any[]) => {\r\n            const style = window.getComputedStyle(entries[0].target, null)\r\n            const width =  parseInt(style.width) - editor.engraver_controller.renderer.padding.left - editor.engraver_controller.renderer.padding.right\r\n            editor.paramChanged({staffwidth:width})\r\n            console.log(width)\r\n            //editor.fireChanged()\r\n        })\r\n        if (paperRef && paperRef.current) {\r\n            observer.observe(paperRef.current! as Element)\r\n        }\r\n        return () => {\r\n            observer.disconnect()\r\n        }\r\n    }, [editor, paperRef])\r\n    React.useEffect(() => {\r\n        if (textInput && textInput.current &&\r\n            paperRef && paperRef.current &&\r\n            warningRef && warningRef.current \r\n            ){\r\n            //let textArea = new abcjs.TextArea(textInput.current)\r\n            let e = new abcjs.Editor(\"outlined-multiline-static\", {\r\n                //canvas_id: paperRef.current, \r\n                paper_id:  paperId,\r\n                warnings_id: warningId\r\n            })\r\n            setEditor(e)\r\n        }\r\n    }, [textInput, paperRef, warningRef, paperId, warningId])\r\n\r\n    //const [synth, setSynth] = React.useState<any>(undefined)\r\n\r\n    return (\r\n        <Container>\r\n        <Grid container spacing={3}>\r\n            <Grid item xs={8}>\r\n                <Button variant=\"contained\" color=\"primary\" onClick={() => {\r\n                    //if (synth === undefined) {\r\n                    let s = new abcjs.synth.CreateSynth();\r\n                    let el = document.createElement('div')\r\n                    let visualObjs = abcjs.renderAbc(el, props.abcNotation)\r\n                    s.init({visualObj: visualObjs[0]}).then(function (response: any) {\r\n                        console.log(\"Audio object has been initialized\")\r\n                        // console.log(response); // this contains the list of notes that were loaded.\r\n                        // midiBuffer.prime actually builds the output buffer.\r\n                        return s.prime()\r\n                    }).then(function () {\r\n                        console.log(\"Audio object has been primed\")\r\n                        // At this point, everything slow has happened. midiBuffer.start will return very quickly and will start playing very quickly without lag.\r\n                        s.start();\r\n                        console.log(\"Audio started\")\r\n                        return Promise.resolve();\r\n                    }).catch(function (error: any) {\r\n                        if (error.status === \"NotSupported\") {\r\n                            //stopAudioButton.setAttribute(\"style\", \"display:none;\");\r\n                            //var audioError = document.querySelector(\".audio-error\");\r\n                            //audioError.setAttribute(\"style\", \"\");\r\n                        } else\r\n                            console.warn(\"synth error\", error);\r\n                    });\r\n                        //setSynth(s)\r\n                    //}\r\n                }}>Play</Button> \r\n                <Paper className={classes.paper} id={paperId} ref={paperRef} style={{padding: 0}}/>\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n                <TextField id=\"outlined-multiline-static\"\r\n                    inputRef={textInput}\r\n                    label=\"Multiline\"\r\n                    multiline\r\n                    fullWidth\r\n                    rows={30}\r\n                    variant=\"outlined\"\r\n                    value={props.abcNotation}\r\n                    onChange={(e) => props.setAbcNotation && props.setAbcNotation(e.target.value)}\r\n                    onSelect={(e) => {\r\n                        console.log('onSelect', e)\r\n                    }}\r\n                    onSelectCapture={(e) => {\r\n                        console.log('onSelectCapture', e)\r\n                    }}\r\n                />\r\n                <Alert severity=\"warning\" id={warningId} ref={warningRef}>This is an error alert — check it out!</Alert>\r\n\r\n            </Grid>\r\n        </Grid>\r\n        </Container>\r\n    )\r\n}\r\nconst mapStateToProps = (state: RootState) => ({\r\n    sheet: state.sheetSlice\r\n})\r\n\r\nexport default connect(mapStateToProps, null)(Sheet) as unknown as React.FC<SheetProps>\r\n","import {keys} from 'lodash'\r\n\r\nimport WebMidi, {\r\n    Input,\r\n    Output,\r\n    InputEventBase,\r\n    InputEventNoteon,\r\n    InputEventNoteoff,\r\n    WebMidiEventConnected,\r\n    WebMidiEventDisconnected\r\n} from 'webmidi'\r\n\r\nWebMidi.enable(function (err) {\r\n\r\n  if (err) {\r\n    console.log(\"WebMidi could not be enabled.\", err);\r\n  } else {\r\n    console.log(\"WebMidi enabled!\");\r\n    console.log(WebMidi.inputs);\r\n    console.log(WebMidi.outputs);\r\n  }\r\n  if (WebMidi.inputs.length === 0){\r\n      return\r\n  }\r\n  console.log(WebMidi.inputs[0].id)\r\n  let output: Output = WebMidi.outputs[0];\r\n/*\r\n  // Playing a note (note number 60, all channels, half velocity) \r\n  output.playNote(60, \"all\", {velocity: 0.5});\r\n  output.playNote(60, \"all\", {velocity: 0.5, duration: 1000});    // duration 1 sec.\r\n\r\n  // Use note name and octave (3rd octave C, on all channels)\r\n  output.playNote(\"C3\");\r\n\r\n  // Specifying a channel (3)\r\n  output.playNote(60, 3);\r\n\r\n  // Stopping a playing note \r\n  output.stopNote(60);\r\n\r\n  // Send control change value 127 to controller 1 (modulation) on all \r\n  // channels.\r\n  output.sendControlChange(1, 127, \"all\");\r\n\r\n  // Send channel aftertouch (half pressure) to the 3rd output device, on \r\n  // channel 8\r\n  output.sendChannelAftertouch(0.5, 8, {pressure: 0.5});\r\n\r\n  // Send pitch bend (between -1 and 1) \r\n  output.sendPitchBend(-0.5); \r\n */\r\n  let keyStatus: {\r\n    [key: number]: InputEventBase<any>\r\n   } = {}\r\n\r\n  function playLater(e: InputEventBase<any>){\r\n\r\n  }\r\n  let list: InputEventBase<any>[] = []\r\n  function play() {\r\n    console.log('play')\r\n    if (list.length === 0){\r\n      return\r\n    }\r\n    let beginTime = list[0].timestamp\r\n    list.forEach(e => {\r\n      if(e.type === 'noteon') {\r\n        const noteOn = e as InputEventNoteon\r\n        setTimeout(() => {\r\n          output.playNote(noteOn.note.number, \"all\", {velocity: noteOn.velocity, duration: 1000})\r\n        }, e.timestamp - beginTime)\r\n      }\r\n    })\r\n    list = []\r\n  }\r\n  let delay: number = 5000\r\n  let input: Input = WebMidi.inputs[0];\r\n  // Listening for a 'note on' message (on all channels) \r\n\r\n  input.addListener('pitchbend', \"all\", e => {\r\n    console.log(e)\r\n  });\r\n});\r\n\r\nexport interface InputHandlers {\r\n    noteon?: (e: InputEventNoteon) => void;\r\n    noteoff?: (e: InputEventNoteoff) => void;\r\n}\r\n\r\nexport interface OutputHandlers {\r\n    good?: () => boolean;\r\n}\r\n\r\nexport interface MidiProcessModule {\r\n    name: string;\r\n    input?: InputHandlers;\r\n    output?: OutputHandlers;\r\n    init?: (input?: Input, output?: Output) => void;\r\n    destroy?: () => void;\r\n    start?: () => void;\r\n    stop?: () => void;\r\n}\r\n\r\nfunction defultMidiProcessModule(){\r\n    return {} as MidiProcessModule\r\n}\r\n\r\nexport interface MidiProcessor {\r\n    switchInputOutput: (inputDeviceName: string, outputDeviceName: string) => void;\r\n    installModule: <M extends MidiProcessModule>(name: string, options?: any) => M | undefined;\r\n    uninstallModule: (name: string) => void;\r\n    destroy: () => void;\r\n    getInputDevices: () => Input[];\r\n    getOutputDevices: () => Output[];\r\n\r\n    installedModule: () => MidiProcessModule[];\r\n    availableModule: () => string[];\r\n}\r\n\r\nexport type MidiProcessModuleFactory = (options: any) => MidiProcessModule\r\n\r\nlet gMidiProcessFactory: {\r\n    [name: string]: MidiProcessModuleFactory\r\n} = {}\r\n\r\nexport function registerMidiProcessModule(name: string, factory: MidiProcessModuleFactory) : void {\r\n    gMidiProcessFactory[name] = factory\r\n}\r\n\r\nexport function createMidiProcessor() : MidiProcessor {\r\n    let modules: MidiProcessModule[] = []\r\n    let currentInput: Input | undefined = undefined\r\n    let currentOutput: Output | undefined = undefined\r\n\r\n    function _installModule(midiModule: MidiProcessModule, input?: Input, output?: Output) {\r\n        if (typeof midiModule.init === \"function\"){\r\n            midiModule.init(input, output)\r\n        }\r\n        if (typeof midiModule.input === \"object\") {\r\n            const inputHandler = midiModule.input\r\n            if (typeof inputHandler.noteon === \"function\") {\r\n                input?.addListener('noteon', 'all', inputHandler.noteon)\r\n            }\r\n            if (typeof inputHandler.noteoff === \"function\") {\r\n                input?.addListener('noteoff', 'all', inputHandler.noteoff)\r\n            }\r\n        }\r\n    }\r\n    function _uninstallModule(midiModule: MidiProcessModule, input?: Input, output?: Output) {\r\n        if (typeof midiModule.input === \"object\"){\r\n            const inputHandler = midiModule.input\r\n            if (typeof inputHandler.noteon === \"function\") {\r\n                input?.removeListener('noteon', 'all', inputHandler.noteon)\r\n            }\r\n            if (typeof inputHandler.noteoff === \"function\") {\r\n                input?.removeListener('noteoff', 'all', inputHandler.noteoff)\r\n            }\r\n        }\r\n        if (typeof midiModule.destroy === \"function\"){\r\n            midiModule.destroy()\r\n        }\r\n    }\r\n    function onMidiDeviceConnected(e: WebMidiEventConnected) {\r\n        console.log('connected', e)\r\n    }\r\n    function onMidiDeviceDosconnected(e: WebMidiEventDisconnected) {\r\n        console.log('disconnected', e)\r\n        if (currentInput?.id === e.port.id || currentOutput?.id === e.port.id) {\r\n            _uninstallAllModules()\r\n        }\r\n    }\r\n    function _register() {\r\n        WebMidi.addListener('connected', onMidiDeviceConnected)\r\n        WebMidi.addListener('disconnected', onMidiDeviceDosconnected)\r\n    }\r\n    function _unregister() {\r\n        WebMidi.removeListener('connected', onMidiDeviceConnected)\r\n        WebMidi.removeListener('disconnected', onMidiDeviceDosconnected)\r\n    }\r\n    if (!WebMidi.enabled){\r\n        WebMidi.enable(function(){\r\n            _register()\r\n        })\r\n    } else {\r\n        _register()\r\n    }\r\n    function _installAllModules() {\r\n        modules.forEach(m => {\r\n            _installModule(m, currentInput, currentOutput)\r\n        })\r\n    }\r\n    function _uninstallAllModules() {\r\n        modules.forEach(m => {\r\n            _uninstallModule(m, currentInput, currentOutput)\r\n        })\r\n    }\r\n    return {\r\n        switchInputOutput: (inputDeviceName: string, outputDeviceName: string) => {\r\n            let newInput = undefined\r\n            let newOutput = undefined\r\n            WebMidi.inputs.forEach(element => {\r\n                if (element.name === inputDeviceName){\r\n                    newInput = element\r\n                }\r\n            })\r\n            WebMidi.outputs.forEach(element => {\r\n                if (element.name === outputDeviceName){\r\n                    newOutput = element\r\n                }\r\n            })\r\n            if (newInput !== currentInput || newOutput !== currentOutput){\r\n                _uninstallAllModules()\r\n                currentInput = newInput\r\n                currentOutput = newOutput\r\n                _installAllModules()\r\n            }\r\n        },\r\n        installModule: <M extends MidiProcessModule>(name: string, options: any) : M | undefined => {\r\n            const factory = gMidiProcessFactory[name]\r\n            if (factory) {\r\n                const midiModule = factory(options);\r\n                _installModule(midiModule, currentInput, currentOutput)\r\n                modules.push(midiModule)\r\n                return midiModule as M\r\n            }\r\n            return undefined\r\n        },\r\n        uninstallModule: (name: string) => {\r\n            const midiModule = modules.find((m) => m.name === name)\r\n            if (midiModule !== undefined){\r\n                modules = modules.filter((m) => m.name !== name)\r\n                _uninstallModule(midiModule, currentInput, currentOutput)\r\n            }\r\n        },\r\n        destroy: () => {\r\n            _uninstallAllModules()\r\n            _unregister()\r\n        },\r\n        getInputDevices: (): Input[] => {\r\n            return WebMidi.inputs\r\n        },\r\n        getOutputDevices: (): Output[] => {\r\n            return WebMidi.outputs\r\n        },\r\n        installedModule: (): MidiProcessModule[] => {\r\n            // TODO:\r\n            return modules\r\n        },\r\n        availableModule: (): string[] => {\r\n            return keys(gMidiProcessFactory)\r\n        }\r\n    }\r\n}\r\n\r\n","import React from 'react'\r\n\r\nimport { connect } from 'react-redux'\r\n\r\nimport { createStyles, Theme, makeStyles } from '@material-ui/core/styles'\r\nimport { RootState } from '../app/rootReducer'\r\n\r\nimport {MidiProcessor} from '../modules/webmidiio'\r\nimport Button from '@material-ui/core/Button'\r\nimport Popover from '@material-ui/core/Popover'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\n\r\nconst useStyles = makeStyles((theme: Theme) => createStyles({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    marginTop: {\r\n        marginTop: 8,\r\n    },\r\n    barNoAnimation: {\r\n        animation: 'none'\r\n    },\r\n    typography: {\r\n      padding: theme.spacing(2),\r\n    },\r\n}))\r\ntype MidiDevicesProps = {\r\n    processor: MidiProcessor | undefined\r\n}\r\n\r\nconst MidiDevices : React.FC<MidiDevicesProps> = (props) => {\r\n    const classes = useStyles()\r\n    const [anchorEl, setAnchorEl] = React.useState<HTMLInputElement|null>(null);\r\n    \r\n    const handleClick = (event: any) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n\r\n    const open = Boolean(anchorEl);\r\n    const id = open ? 'simple-popover' : undefined;\r\n    const [inputDeviceName, setInputDeviceName] = React.useState('');\r\n    const [outputDeviceName, setOutputDeviceName] = React.useState('');\r\n  \r\n    const handleInputDeviceNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setInputDeviceName(event.target.value);\r\n    };\r\n    const handleOutputDeviceNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setOutputDeviceName(event.target.value);\r\n    };\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n        props.processor?.switchInputOutput(inputDeviceName, outputDeviceName)\r\n    };\r\n    return(\r\n        <>\r\n        <Button onClick={handleClick}\r\n            variant=\"outlined\">\r\n            Select MIDI device\r\n        </Button>\r\n      <Popover\r\n        id={id}\r\n        open={open}\r\n        anchorEl={anchorEl}\r\n        onClose={handleClose}\r\n        anchorOrigin={{\r\n          vertical: 'bottom',\r\n          horizontal: 'center',\r\n        }}\r\n        transformOrigin={{\r\n          vertical: 'top',\r\n          horizontal: 'center',\r\n        }}\r\n      >\r\n        <Typography className={classes.typography}>Select from the available MIDI devices here:</Typography>\r\n        <FormControl component=\"fieldset\">\r\n            <FormLabel component=\"legend\">MIDI devices for input:</FormLabel>\r\n            <RadioGroup aria-label=\"gender\" name=\"gender1\" value={inputDeviceName} onChange={handleInputDeviceNameChange}>\r\n                <FormControlLabel value=\"\" control={<Radio />} label=\"None\" />\r\n            {props.processor?.getInputDevices().map(element => (\r\n                <>\r\n                <FormControlLabel value={element.name} control={<Radio />} label={element.name} />\r\n                </>\r\n            ))}\r\n            </RadioGroup>\r\n        </FormControl><FormControl component=\"fieldset\">\r\n            <FormLabel component=\"legend\">MIDI devices for output:</FormLabel>\r\n            <RadioGroup aria-label=\"gender\" name=\"gender1\" value={outputDeviceName} onChange={handleOutputDeviceNameChange}>\r\n                <FormControlLabel value=\"\" control={<Radio />} label=\"None\" />\r\n            {props.processor?.getOutputDevices().map(element => (\r\n                <>\r\n                <FormControlLabel value={element.name} control={<Radio />} label={element.name} />\r\n                </>\r\n            ))}\r\n            </RadioGroup>\r\n        </FormControl>\r\n      </Popover>\r\n      </>\r\n    )\r\n}\r\nconst mapStateToProps = (state: RootState) => ({\r\n    sheet: state.sheetSlice\r\n})\r\n\r\nexport default connect(mapStateToProps, null)(MidiDevices) as unknown as React.FC<MidiDevicesProps>\r\n","import React from 'react'\r\n\r\nimport { connect } from 'react-redux'\r\n\r\nimport { createStyles, Theme, makeStyles } from '@material-ui/core/styles'\r\nimport { RootState } from '../app/rootReducer'\r\n\r\nimport {MidiProcessor} from '../modules/webmidiio'\r\nimport Button from '@material-ui/core/Button'\r\nimport Popover from '@material-ui/core/Popover'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Radio from '@material-ui/core/Radio'\r\nimport FormGroup from '@material-ui/core/FormGroup'\r\nimport Checkbox from '@material-ui/core/Checkbox'\r\n\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport FormLabel from '@material-ui/core/FormLabel'\r\n\r\nconst useStyles = makeStyles((theme: Theme) => createStyles({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    marginTop: {\r\n        marginTop: 8,\r\n    },\r\n    barNoAnimation: {\r\n        animation: 'none'\r\n    },\r\n    typography: {\r\n      padding: theme.spacing(2),\r\n    },\r\n}))\r\ntype MidiProcessModulesProps = {\r\n    processor: MidiProcessor | undefined\r\n}\r\ntype MidiProcessModuleProps = {\r\n    processor: MidiProcessor | undefined\r\n    moduleName: string\r\n    installed: boolean\r\n    onChange: (e: React.ChangeEvent<HTMLInputElement>, checked: boolean) => void\r\n}\r\nconst MidiProcessModule :  React.FC<MidiProcessModuleProps> = (props) => {{\r\n    return (\r\n    <>\r\n        <FormControlLabel\r\n            control={<Checkbox checked={props.installed} onChange={props.onChange} name={props.moduleName}/>}\r\n            label={props.moduleName}\r\n        />\r\n    </>\r\n)}\r\n}\r\n\r\nconst MidiProcessModules : React.FC<MidiProcessModulesProps> = (props) => {\r\n    const classes = useStyles()\r\n    const [anchorEl, setAnchorEl] = React.useState<HTMLInputElement|null>(null)\r\n    \r\n    const handleClick = (event: any) => {\r\n        setAnchorEl(event.currentTarget)\r\n    }\r\n\r\n    const open = Boolean(anchorEl)\r\n    const id = open ? 'simple-popover' : undefined\r\n    const [inputDeviceName, setInputDeviceName] = React.useState('')\r\n    const [outputDeviceName, setOutputDeviceName] = React.useState('')\r\n    const [installedModules, setInstalledModules] = React.useState<string[]>([])\r\n  \r\n    const handleInputDeviceNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setInputDeviceName(event.target.value)\r\n    }\r\n    const handleOutputDeviceNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setOutputDeviceName(event.target.value)\r\n    }\r\n    const handleClose = () => {\r\n        setAnchorEl(null)\r\n        props.processor?.switchInputOutput(inputDeviceName, outputDeviceName)\r\n    }\r\n    const handleChange = React.useCallback((moduleName: string, e: React.ChangeEvent<HTMLInputElement>, checked: boolean) => {\r\n        if (props.processor) {\r\n            const processor = props.processor\r\n            if (checked) {\r\n                processor.installModule(moduleName)\r\n\r\n            } else {\r\n                processor.uninstallModule(moduleName)\r\n            }\r\n            let installedModules = processor.installedModule().map((m) => m.name)\r\n            setInstalledModules(installedModules)\r\n        }\r\n    }, [props.processor])\r\n    return(\r\n        <>\r\n        <Button onClick={handleClick}\r\n            variant=\"outlined\">\r\n            Select MIDI process modules\r\n        </Button>\r\n      <Popover\r\n        id={id}\r\n        open={open}\r\n        anchorEl={anchorEl}\r\n        onClose={handleClose}\r\n        anchorOrigin={{\r\n          vertical: 'bottom',\r\n          horizontal: 'center',\r\n        }}\r\n        transformOrigin={{\r\n          vertical: 'top',\r\n          horizontal: 'center',\r\n        }}\r\n      >\r\n        <Typography className={classes.typography}>Select from the available MIDI process modules here:</Typography>\r\n        <FormControl component=\"fieldset\">\r\n            <FormLabel component=\"legend\">MIDI process modules:</FormLabel>\r\n            <FormGroup>\r\n            {props.processor?.availableModule().map(moduleName => (\r\n                <MidiProcessModule\r\n                    processor={props.processor}\r\n                    moduleName={moduleName}\r\n                    installed={installedModules.indexOf(moduleName) !== -1}\r\n                    onChange={handleChange.bind(this, moduleName)}\r\n                />))}\r\n            </FormGroup>\r\n        </FormControl>\r\n      </Popover>\r\n      </>\r\n    )\r\n}\r\nconst mapStateToProps = (state: RootState) => ({\r\n    sheet: state.sheetSlice\r\n})\r\n\r\nexport default connect(mapStateToProps, null)(MidiProcessModules) as unknown as React.FC<MidiProcessModulesProps>\r\n","// This file convers sequence of Notes into Abc Notation\r\nimport {join, minBy, filter} from 'lodash'\r\n\r\nconst noteNameIndex: string[] = ['C', '^C', 'D', '^D', 'E', 'F', '^F', 'G', '^G', 'A', '^A', 'B']\r\nconst octaves: string[] = ['C,,,,', 'C,,,', 'C,,', 'C,', 'C', 'c', \"c'\", \"c''\", \"c'''\"]\r\nconst octaveMiddle: number = 60 // Middle C \r\nconst firstNote: number = 21 // A0\r\nconst lastNote : number = 108 // C8\r\n\r\n// TODO: keySignature determines abcnotenames. e.g. in D, \r\n// type keySignature = 'C' | 'D' | 'Dmin' \r\n\r\n// const noteNameIndex: string[] = []\r\n\r\nexport function midiNumberToAbcNoteName(n: number/*, keySig: number*/): string {\r\n    if (n < firstNote || n > lastNote) {\r\n        return 'C,,,,' // still return something, but obviously outside the keyboard\r\n    }\r\n    let noteName = noteNameIndex[(n - octaveMiddle + 120) % 12]\r\n    let octave = octaves[(n - 12) / 12 | 0]\r\n    if (octave[0] === 'c') {\r\n        noteName = noteName.toLowerCase()\r\n    }\r\n    octave = octave.slice(1)\r\n    return `${noteName}${octave}`\r\n}\r\n\r\nexport function slotToAbcDuration(slots: number, beatsPerMeasure: number, defaultBeatDurationInSlots: number): string {\r\n    if (slots === defaultBeatDurationInSlots) {\r\n        return ''\r\n    }\r\n    if (slots % defaultBeatDurationInSlots === 0) {\r\n        return `${slots / defaultBeatDurationInSlots}`\r\n    }\r\n    return `${slots}/${defaultBeatDurationInSlots}`\r\n}\r\n\r\nexport type Note = {\r\n    n: number, // note number\r\n    begin: number, // noteon timestamp relative to record start\r\n    duration: number, // \r\n    velocity: number, // velocity \r\n}\r\n\r\ntype MeasureNotation = {\r\n    measureIndex: number\r\n    notations: string\r\n}\r\n\r\ntype Slots =  {\r\n    [key: number]: Note[]\r\n}\r\ntype ProcessEnv = {    \r\n    bpm: number // = 60\r\n    msPerMinute: number //  = 60 * 1000\r\n    beatsPerMeasure: number //  = 4\r\n    measureDuration: number //  = msPerMinute * beatsPerMeasure / bpm | 0 // in ms\r\n    beatDuration: number //  = msPerMinute / bpm | 0 // in ms\r\n    defaultBeat: number //  = 4 // 1/4 notes as the default\r\n    resolution: number //  = 8 // minimal using 1/8 notes\r\n    slotDuration: number //  = beatDuration * defaultBeat / resolution | 0\r\n    slotsPerMeasure: number //  = beatsPerMeasure * resolution / defaultBeat | 0\r\n    defaultBeatInSlots: number //  = resolution / defaultBeat | 0\r\n}\r\nfunction processVoice(maxSlot: number, slots: Slots, processEnv: ProcessEnv) : MeasureNotation[] {\r\n    let newAbcNotation = ''\r\n    let numMeasures = 0\r\n    let measures: MeasureNotation[] = []\r\n    let lastSlotReaches = 0\r\n    for (let i = 0; i <= maxSlot; i++){\r\n        if (i > 0 && i % processEnv.slotsPerMeasure === 0) {\r\n            // newAbcNotation += '|'\r\n            if (i > lastSlotReaches) {\r\n                newAbcNotation += `z${slotToAbcDuration(i - lastSlotReaches, processEnv.beatsPerMeasure, processEnv.defaultBeatInSlots)}`\r\n            }\r\n            measures.push({\r\n                measureIndex: numMeasures,\r\n                notations: newAbcNotation\r\n            })\r\n            newAbcNotation = ''\r\n            numMeasures++\r\n            lastSlotReaches = i\r\n        }\r\n        if (i in slots && slots[i].length > 0) {\r\n            let slotMaxDuration = 1\r\n            for (let j = i + 1; j <= maxSlot + processEnv.slotsPerMeasure; j++) {\r\n                if (j % processEnv.slotsPerMeasure === 0) {\r\n                    slotMaxDuration = j - i\r\n                    break\r\n                }\r\n                if (j in slots && slots[j].length > 0) {\r\n                    slotMaxDuration = j - i\r\n                    break\r\n                }\r\n            }\r\n            if (i > lastSlotReaches) {\r\n                newAbcNotation += `z${slotToAbcDuration(i - lastSlotReaches, processEnv.beatsPerMeasure, processEnv.defaultBeatInSlots)}`\r\n            }\r\n            let maxDurationsInSlots = 0\r\n            const notes = slots[i].map((n: Note) => {\r\n                const durationInSlots = (n.duration + processEnv.slotDuration * 0.8) / processEnv.slotDuration | 0\r\n                if (durationInSlots > slotMaxDuration) {\r\n                    let nRest: Note = {\r\n                        ...n,\r\n                        duration: n.duration - slotMaxDuration * processEnv.slotDuration\r\n                    }\r\n                    if (!(i + slotMaxDuration in slots)) {\r\n                        slots[i + slotMaxDuration] = [nRest]\r\n                    } else {\r\n                        slots[i + slotMaxDuration].push(nRest)\r\n                    }\r\n                    maxSlot = Math.max(maxSlot, i + slotMaxDuration)\r\n                    const note = `${midiNumberToAbcNoteName(n.n)}${slotToAbcDuration(slotMaxDuration, processEnv.beatsPerMeasure, processEnv.defaultBeatInSlots)}-`\r\n                    maxDurationsInSlots = Math.max(slotMaxDuration, durationInSlots)\r\n                    return note\r\n                }\r\n                const note = `${midiNumberToAbcNoteName(n.n)}${slotToAbcDuration(durationInSlots, processEnv.beatsPerMeasure, processEnv.defaultBeatInSlots)}`\r\n                maxDurationsInSlots = Math.max(maxDurationsInSlots, durationInSlots)\r\n                return note\r\n            })\r\n            if (notes.length > 1){\r\n                newAbcNotation += `[${join(notes, '')}]`\r\n            } else {\r\n                newAbcNotation += notes[0]\r\n            }\r\n            lastSlotReaches = i + maxDurationsInSlots\r\n        } else {\r\n        // newAbcNotation += `z${slotToAbcDuration(1, beatsPerMeasure, defaultBeatInSlots)}`\r\n        }\r\n    }\r\n    if (newAbcNotation.length > 0){\r\n        measures.push({\r\n            measureIndex: numMeasures,\r\n            notations: newAbcNotation\r\n        })\r\n        numMeasures++\r\n    }\r\n    return measures\r\n}\r\n\r\n\r\nfunction processAll(sequenceBeginTime: number, sequence: Note[], processEnv: ProcessEnv): string {\r\n    let maxSlot = 0\r\n    let slots: Slots = {}\r\n    let notes = sequence.forEach((n: Note, index: number) => {\r\n        const timeSinceBegin = n.begin - sequenceBeginTime\r\n        const measureN = (timeSinceBegin + processEnv.slotDuration / 2) / processEnv.measureDuration | 0\r\n        const slotInMeasureN = Math.max(0, timeSinceBegin - measureN * processEnv.measureDuration + processEnv.slotDuration / 2) / processEnv.slotDuration | 0\r\n        const slotN = measureN * processEnv.slotsPerMeasure + slotInMeasureN\r\n\r\n        maxSlot = Math.max(slotN, maxSlot)\r\n        if (slotN in slots) {\r\n            slots[slotN].push(n)\r\n        } else {\r\n            slots[slotN] = [n]\r\n        }\r\n    })\r\n    const measurePerLine = 3\r\n\r\n    let treble8: Slots = {}\r\n    let bass: Slots = {}\r\n    const octaveMiddle = 60 // Middle C\r\n    for (let i = 0; i <= maxSlot; i++){\r\n        if (i in slots) {\r\n            treble8[i] = filter(slots[i], (n)=> n.n >= octaveMiddle)\r\n            bass[i] = filter(slots[i], (n)=> n.n < octaveMiddle)\r\n        }\r\n    }\r\n    const treble8Measures = processVoice(maxSlot, treble8, processEnv)\r\n    const bassMeasures = processVoice(maxSlot, bass, processEnv)\r\n    \r\n    const header = `X: 1\r\nT: Untitled\r\nM: ${processEnv.beatsPerMeasure}/${processEnv.defaultBeat}\r\nL: 1/8\r\nR: reel\r\nK: D`\r\n    let abcNotation = [\r\n        header,\r\n        '%%score (T1) (B1)',\r\n        'V:T1  clef=treble-8  name=\"Tenore I\"   snm=\"T.I\"',\r\n        'V:B1  clef=bass      name=\"Basso I\"    snm=\"B.I\"  octave=-2',\r\n    ]\r\n    const numMeasures = Math.max(treble8Measures.length, bassMeasures.length)\r\n    for (let i = 0; i < numMeasures; i += measurePerLine) {\r\n        abcNotation.push(`% ${i + 1}`)\r\n        abcNotation.push(`[V:T1]${treble8Measures.slice(i, i + measurePerLine).map(m => m.notations).join(' | ')} |`)\r\n        abcNotation.push(`[V:B1]${bassMeasures.slice(i, i + measurePerLine).map(m => m.notations).join(' | ')} |`)\r\n    }\r\n\r\n    return abcNotation.join('\\n')\r\n}\r\nexport function convertToAbcNotation(sequence: Note[]) : string {\r\n\r\n    const sequenceBeginTime = minBy(sequence, 'begin')?.begin\r\n    if (sequenceBeginTime === undefined) {\r\n        return ''\r\n    }\r\n\r\n    const bpm = 60\r\n    const msPerMinute = 60 * 1000\r\n    const beatsPerMeasure = 4\r\n    const measureDuration = msPerMinute * beatsPerMeasure / bpm | 0 // in ms\r\n    const beatDuration = msPerMinute / bpm | 0 // in ms\r\n    const defaultBeat = 4 // 1/4 notes as the default\r\n    const resolution = 8 // minimal using 1/8 notes\r\n    const slotDuration = beatDuration * defaultBeat / resolution | 0\r\n    const slotsPerMeasure = beatsPerMeasure * resolution / defaultBeat | 0\r\n    const defaultBeatInSlots = resolution / defaultBeat | 0\r\n    const env: ProcessEnv = {\r\n        bpm, msPerMinute, beatsPerMeasure, measureDuration, beatDuration, defaultBeat, resolution, slotDuration, slotsPerMeasure, defaultBeatInSlots\r\n    }\r\n\r\n    let voices = []\r\n    return processAll(sequenceBeginTime, sequence, env)\r\n}\r\n","\r\nimport {registerMidiProcessModule, MidiProcessModuleFactory} from './webmidiio'\r\n\r\nimport {createRecorder} from './recorder'\r\nimport {createRepeater} from './repeater'\r\nimport {createMetronome} from './metronome'\r\n\r\nregisterMidiProcessModule('recorder', createRecorder as MidiProcessModuleFactory)\r\nregisterMidiProcessModule('repeater', createRepeater as MidiProcessModuleFactory)\r\nregisterMidiProcessModule('metronome', createMetronome as MidiProcessModuleFactory)\r\n","import {MidiProcessModule} from './webmidiio'\r\n\r\nimport {InputEventNoteon, InputEventNoteoff} from 'webmidi'\r\n\r\nimport { Note } from './sequencetoabc'\r\n\r\nexport interface MidiRecorderModule extends MidiProcessModule {\r\n    start: () => void;\r\n    getSequence: () => Note[];\r\n}\r\n\r\nexport function createRecorder() : MidiRecorderModule {\r\n    let beginTime: Date | null = null\r\n    let notes: {\r\n        [key: number]: InputEventNoteon\r\n    } = {}\r\n    let sequence: Note[] = []\r\n    return {\r\n        name: 'recorder',\r\n        start: () => {\r\n            beginTime = new Date()\r\n            notes = {}\r\n            sequence = []\r\n        },\r\n        input: {\r\n            noteon: (e: InputEventNoteon) => {\r\n                notes[e.note.number] = e\r\n            },\r\n            noteoff: (e: InputEventNoteoff) => {\r\n                const now = new Date()\r\n                let eOn = notes[e.note.number]\r\n                delete notes[e.note.number]\r\n                const dtime = now.getTime() - e.timestamp\r\n                const noteOnTime = dtime + eOn.timestamp - (beginTime ? beginTime.getTime() : 0)\r\n                const r = {n: e.note.number, begin: noteOnTime, duration: e.timestamp - eOn.timestamp, velocity: eOn.velocity}\r\n                sequence.push(r)\r\n                console.log('Recorded:', r)\r\n            }\r\n        },\r\n        getSequence: () => {\r\n            return [...sequence]\r\n        }\r\n    }\r\n}\r\n","import {InputHandlers, OutputHandlers, MidiProcessModule} from './webmidiio'\r\n\r\nimport WebMidi, {Input, Output, InputEventBase, InputEventNoteon, InputEventNoteoff} from 'webmidi'\r\n\r\nexport interface MidiRepeaterModule extends MidiProcessModule {\r\n}\r\n\r\nexport function createRepeater(delay: number = 5000) : MidiRepeaterModule {\r\n    let beginTime: Date | null = null\r\n    let notes: {\r\n        [key: number]: InputEventNoteon\r\n    } = {}\r\n    let currentInput: Input | null = null\r\n    let currentOutput: Output | null = null\r\n\r\n    return {\r\n        name: 'repeater',\r\n        init: (input?: Input, output?: Output) => {\r\n            currentInput = input ? input : null\r\n            currentOutput = output ? output : null\r\n        },\r\n        destroy: () => {\r\n            currentInput = null\r\n            currentOutput = null\r\n        },\r\n        start: () => {\r\n            beginTime = new Date()\r\n            notes = {}\r\n        },\r\n        input: {\r\n            noteon: (e: InputEventNoteon) => {\r\n                const noteOn = e as InputEventNoteon\r\n                console.log(e)\r\n                notes[noteOn.note.number] = e\r\n                setTimeout(() => {\r\n                    currentOutput?.playNote(e.note.number, \"all\", {velocity: e.velocity})\r\n                }, delay)\r\n            },\r\n            noteoff: (e: InputEventNoteoff) => {\r\n                const noteOff = e as InputEventNoteoff\r\n                console.log(e)\r\n                //list.push(e)\r\n                const down = notes[noteOff.note.number]\r\n                delete notes[noteOff.note.number]\r\n              \r\n                setTimeout(() => {\r\n                    currentOutput?.stopNote(e.note.number)\r\n                }, delay)\r\n            }\r\n        }\r\n    }\r\n}\r\n","import {InputHandlers, OutputHandlers, MidiProcessModule} from './webmidiio'\r\n\r\nimport WebMidi, {Input, Output, InputEventBase, InputEventNoteon, InputEventNoteoff, INoteParam} from 'webmidi'\r\n\r\nexport interface MidiMetronomeModule extends MidiProcessModule {\r\n    start: () => void;\r\n    defaultOptions: () => MetronomeOptions;\r\n}\r\n\r\nexport type MetronomeOptions = {\r\n    beats: number[]\r\n    notes: INoteParam[]\r\n    bpm: number\r\n    program: number\r\n    channel: number\r\n}\r\n\r\nexport function createMetronome(options: MetronomeOptions = {beats: [], notes: [], bpm: 60, program: 16, channel: 16}) : MidiMetronomeModule {\r\n    let beginTime: Date | null = null\r\n\r\n    let currentInput: Input | null = null\r\n    let currentOutput: Output | null = null\r\n    let currentBeat: number = 0\r\n    let timer: NodeJS.Timeout | undefined = undefined\r\n    if (options.program === undefined || options.channel < 0 || options.channel > 127) {\r\n        options.program = 16\r\n    }\r\n    if (options.channel === undefined || options.channel < 0 || options.channel > 16) {\r\n        options.channel = 16\r\n    }\r\n    return {\r\n        name: 'metronome',\r\n        defaultOptions: (): MetronomeOptions => {\r\n            return {beats: [], notes: [], bpm: 60, program: 16, channel: 16}\r\n        },\r\n        init: (input?: Input, output?: Output) => {\r\n            currentInput = input ? input : null\r\n            currentOutput = output ? output : null\r\n            currentOutput?.sendProgramChange(options.program, options.channel)\r\n            timer = setInterval(() => {\r\n                currentBeat = currentBeat + 1\r\n                if (currentOutput) {\r\n                    let velocity = 0.25\r\n                    if (options.beats.length > 0) {\r\n                        velocity = options.beats[currentBeat % options.beats.length]\r\n                    }\r\n                    let note: INoteParam = \"C3\"\r\n                    if (options.notes.length > 0) {\r\n                        note = options.notes[currentBeat % options.notes.length]\r\n                    }\r\n                    currentOutput.playNote(note, 16, {duration: 10, velocity: velocity / 2})\r\n                }\r\n            }, 60 * 1000 / options.bpm)\r\n        },\r\n        destroy: () => {\r\n            if (timer) {\r\n                clearInterval(timer)\r\n            }\r\n            timer = undefined\r\n            currentInput = null\r\n            currentOutput = null\r\n        },\r\n        start: () => {\r\n            beginTime = new Date()\r\n            currentBeat = 0\r\n        },\r\n        input: {\r\n        }\r\n    }\r\n}\r\n","import './App.css';\r\nimport Sheet from './views/Sheet'\r\nimport { createMidiProcessor, MidiProcessor } from './modules/webmidiio'\r\nimport { createRecorder, MidiRecorderModule } from './modules/recorder'\r\nimport { createMetronome, MidiMetronomeModule } from './modules/metronome'\r\n\r\nimport React, { useEffect } from 'react'\r\nimport {isEqual, minBy, join, filter} from 'lodash'\r\nimport MidiDevices from './views/MidiDevices'\r\nimport Button from '@material-ui/core/Button'\r\nimport Chip from '@material-ui/core/Chip'\r\nimport MidiProcessModules from './views/MidiProcessModules'\r\nimport {midiNumberToAbcNoteName, slotToAbcDuration, Note} from './modules/sequencetoabc'\r\nimport './modules'\r\n\r\nimport { convertToAbcNotation } from './modules/sequencetoabc'\r\n\r\nfunction App() {\r\n  \r\n  const [midiProcessor, setMidiProcessor] = React.useState<undefined | MidiProcessor>(undefined)\r\n  const [recorder, setRecorder] = React.useState<undefined | MidiRecorderModule>(undefined)\r\n  const [metronome, setMetronome] = React.useState<undefined | MidiMetronomeModule>(undefined)\r\n  useEffect(() => {\r\n    let newProcessor = createMidiProcessor()\r\n    let aRecorder = newProcessor.installModule<MidiRecorderModule>('recorder')\r\n    let aMetronome = newProcessor.installModule<MidiMetronomeModule>('metronome', {beats: [0.25, 0.1, 0.15, 0.1], notes: [\"C3\", \"G2\", \"A2\", \"G2\"], bpm: 60})\r\n    setMidiProcessor(newProcessor)\r\n    setRecorder(aRecorder)\r\n    setMetronome(aMetronome)\r\n    return () => {\r\n      setRecorder(undefined)\r\n      setMetronome(undefined)\r\n      setMidiProcessor(undefined)\r\n      newProcessor.destroy()\r\n    }\r\n  }, [])\r\n  \r\n  const [sequence, setSequence] = React.useState<Note[]>([])\r\n  const recordStart = () => {\r\n    recorder?.start()\r\n    metronome?.start()\r\n  }\r\n  const playStart = () => {\r\n    //player?.start()\r\n  }\r\n  const [sequenceBeginTime, setSequenceBeginTime] = React.useState(0)\r\n  useEffect(()=>{\r\n    const handle = setInterval(() => {\r\n      const newSequence = recorder ? recorder.getSequence() : []\r\n      setSequence(prevSequence => {\r\n        if (isEqual(newSequence, prevSequence)) {\r\n          return prevSequence\r\n        } else {\r\n          const beginTime = minBy(newSequence, 'begin')\r\n          if (beginTime !== undefined) {\r\n            setSequenceBeginTime(beginTime.begin)\r\n          }\r\n          return newSequence\r\n        }\r\n      })\r\n    }, 1000)\r\n    return () => {\r\n      clearInterval(handle)\r\n    }\r\n  }, [recorder])\r\n  const [abcNotation, setAbcNotation] = React.useState(`X: 1\r\nT: Test\r\nM: 4/4\r\nL: 1/8\r\nR: reel\r\nK: D\r\n|:D2|EB{c}BA B2 EB|~B2 AB dBAG|FDAD BDAD|FDAD dAFD|\r\nEBBA B2 EB|B2 AB defg|afe^c dBAF|DEFD E2:|\r\n|:gf|eB B2 efge|eB B2 gedB|A2 FA DAFA|A2 FA defg|\r\neB B2 eBgB|eB B2 defg|afe^c dBAF|DEFD E2:|\r\n`)\r\n  useEffect(() => {\r\n    setAbcNotation(convertToAbcNotation(sequence))\r\n  }, [sequence, sequenceBeginTime])\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        Connect to your MIDI device and play.\r\n      </header>\r\n      <MidiDevices processor={midiProcessor}/>\r\n      <MidiProcessModules processor={midiProcessor}/>\r\n      <Button color=\"primary\" variant=\"contained\" onClick={recordStart}>Record</Button>\r\n      <Button color=\"primary\" variant=\"contained\" onClick={playStart}>Play</Button>\r\n      <Sheet abcNotation={abcNotation} setAbcNotation={setAbcNotation}/>\r\n      {sequence.map((n: Note, index: number) => (\r\n        <Chip key={index} label={`${midiNumberToAbcNoteName(n.n)} ${((n.begin - sequenceBeginTime) / 1000).toFixed(2)} - ${(n.duration / 1000).toFixed(2)}`}/>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\r\n\r\nexport type SheetType = {\r\n    abcNotation: string\r\n}\r\n\r\nconst getInitialState = () : SheetType => {\r\n    let initialState = {\r\n        abcNotation:  `X: 1\r\nT: Cooley's\r\nM: 4/4\r\nL: 1/8\r\nR: reel\r\nK: Emin\r\n|:D2|EB{c}BA B2 EB|~B2 AB dBAG|FDAD BDAD|FDAD dAFD|\r\nEBBA B2 EB|B2 AB defg|afe^c dBAF|DEFD E2:|\r\n|:gf|eB B2 efge|eB B2 gedB|A2 FA DAFA|A2 FA defg|\r\neB B2 eBgB|eB B2 defg|afe^c dBAF|DEFD E2:|\r\n`\r\n    } as SheetType\r\n\r\n    try {\r\n        const sheet = localStorage.getItem('sheet')\r\n        if (sheet !== null) {\r\n            initialState = JSON.parse(sheet)\r\n        }\r\n    } catch (err) {\r\n        console.log('getInitialState: load jobQuery caught err:', err)\r\n    }\r\n    return initialState\r\n}\r\n\r\nconst updateLocalStorage = (state: SheetType) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state)\r\n        localStorage.setItem('sheet', serializedState)\r\n    } catch(err) {\r\n        // ignore write errors\r\n        console.log('updateLocalStorage: caught err:', err)\r\n    }\r\n}\r\n\r\nconst sheetSlice = createSlice({\r\n    name: \"sheet\",\r\n    initialState: getInitialState(),\r\n    reducers: {\r\n        setAbcNotation(state: SheetType, action: PayloadAction<string>) {\r\n            state.abcNotation = action.payload\r\n            updateLocalStorage(state)\r\n        }\r\n    },\r\n})\r\n\r\nexport type SettingsState = ReturnType<typeof sheetSlice.reducer>\r\nexport default sheetSlice\r\n\r\n","import { combineReducers } from '@reduxjs/toolkit'\r\n\r\nimport sheetSlice from './sheetSlice'\r\n\r\nconst rootReducer = combineReducers({\r\n    sheetSlice: sheetSlice.reducer,\r\n})\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>\r\nexport default rootReducer\r\n","import { configureStore } from '@reduxjs/toolkit'\r\n\r\nimport rootReducer from './rootReducer'\r\n\r\nconst store = configureStore({\r\n    reducer: rootReducer\r\n})\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './app/store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}